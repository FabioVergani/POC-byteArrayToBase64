<!doctype html>
<html>
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<title>byteArrayToBase64 - Playground</title>
		<style>
			:root {
				--color: #282828;
				--backgroundColor: #fcf8fa;
				--placeholder-color: #959eb2;

				--form-element-color: #000;
				--form-element-backgroundColor: #fefefe;
				--form-element-borderColor: #bfbfbf;
				--form-element-borderColor-hover: #767676;
				--form-element-borderColor-focus: #5a5a5a;
				--form-element-borderColor-disabled: #dfdfdf;

				--option-backgroundColor-selected: #c8e3fe;

				--icon-size: 1.2rem;

				--filter-hue: 190deg;

				--primary-hue: 220;
				--primary-saturation: 62%;

				--primary-lightness-light: 56%;
				--hover-lightness-light: 45%;
				--active-lightness-light: 43%;

				--shadow-alpha: 24%;

				--primary-color: #fff;

				--primary-background: hsl(
					var(--primary-hue),
					var(--primary-saturation),
					var(--primary-lightness-light)
				);
				--primary-background-hover: hsl(
					var(--primary-hue),
					var(--primary-saturation),
					var(--hover-lightness-light)
				);
				--primary-background-active: hsl(
					var(--primary-hue),
					var(--primary-saturation),
					var(--active-lightness-light)
				);

				--shadow-color: rgb(0 0 0 / var(--shadow-alpha));

				--button-stroke: hsl(var(--primary-hue), 100%, 30%);
				--button-outline: hsl(var(--primary-hue), 80%, 35%);
				--button-text-shadow: hsl(var(--primary-hue), 70%, 25%);

				--sb-track-color: #f1f1f1;
				--sb-thumb-color: #c1c1c1;

				@supports (background-image: url('data:image/svg+xml,')) {
					--icon-chevron-right: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%0A%3E%3Cpath fill='none' stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m9 20 8-8-8-8' /%3E%3C/svg%3E%0A");
					--icon-chevron-down: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='none' stroke='%23000' stroke-linecap='round' stroke-linejoin='round' stroke-width='3' d='m4 9 8 8 8-8' /%3E%3C/svg%3E%0A");
					--icon-expand: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%0A%3E%3Cpath stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M8 4H4m0 0v4m0-4 5 5m7-5h4m0 0v4m0-4-5 5M8 20H4m0 0v-4m0 4 5-5m7 5h4m0 0v-4m0 4-5-5'/%3E%3C/svg%3E%0A");
					--icon-contract: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%0A%3E%3Cpath stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 9h4m0 0V5m0 4L4 4m15 5h-4m0 0V5m0 4 5-5M5 15h4m0 0v4m0-4-5 5m15-5h-4m0 0v4m0-4 5 5'/%3E%3C/svg%3E%0A");
					--icon-floppy: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M5 3a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V7a2 2 0 0 0-1-1l-2-2a2 2 0 0 0-1-1H5Zm3 11a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v6H8v-6Zm1-7V5h6v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1Z'/%3E%3Cpath d='M14 17h-4v-2h4v2Z'/%3E%3C/svg%3E");
					--icon-erase: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M11.4 5.5C13.1 3.8 14 3 15 3s1.8.8 3.5 2.5S21 8 21 9s-.8 2-2.5 3.6l-4.2 4.2-7-7.1 4.1-4.2Z'/%3E%3Cpath d='m6.2 10.8 7 7-.6.7-1 1H21a.8.8 0 0 1 0 1.5H9c-1 0-1.9-.9-3.5-2.5C3.8 16.8 3 16 3 15s.8-2 2.5-3.6l.7-.6Z'/%3E%3C/svg%3E");
					--icon-clipboard: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath d='M8.7 7h6.6l.3-.8V5c0-1.1-.7-1.8-1.4-1.8h-4C9 3.3 8.4 4 8.4 5v1l.3.8Z'/%3E%3Cpath d='M18.2 4.7h-.4l-.3.4v1c0 1.5-1.1 2.3-2.2 2.3H8.7c-1 0-2.2-1.1-2.2-2.2V5l-.3-.4h-.4c-1 0-1.8.8-1.8 1.8V19c0 1.1.7 1.8 1.8 1.8h12.4c1 0 1.8-.7 1.8-1.8V6.5c0-1-.7-1.8-1.8-1.8Z'/%3E%3C/svg%3E");
				}
			}

			::-webkit-scrollbar-corner {
				background-color: transparent;
			}

			::placeholder {
				color: var(--placeholder-color);
				transition: opacity 0.35s ease;
				padding-right: 2rem;
			}

			.thin-scrollbar {
				--sb-size: 6px;
				&::-webkit-scrollbar {
					width: var(--sb-size);
				}
				&::-webkit-scrollbar-track {
					background: var(--sb-track-color);
					border-radius: 0;
				}
				&::-webkit-scrollbar-thumb {
					background: var(--sb-thumb-color);
					border-radius: 0;
				}
			}

			html {
				display: flex;
				flex-direction: column;
				min-height: 100vh;
				user-select: none;
				font-family: ui-sans-serif, sans-serif;
				color: var(--color);
				background: var(--backgroundColor);
			}

			body {
				padding: 0;
				margin: 1rem;
				flex: 1 1 100%;
				display: flex;
			}

			main {
				flex: 1 1 100%;
				display: flex;
				overflow: auto;
			}

			button {
				cursor: pointer;
				border: 0;
				border-radius: 4px;
				margin: 1rem;
				padding: 0.5rem 1rem;
				paint-order: stroke fill;
				-webkit-text-stroke: 1px var(--button-stroke);
				background: var(--primary-background);
				color: var(--primary-color);
				text-shadow: 1px 1px 0 var(--button-text-shadow);
				outline: 1px solid var(--button-outline);
				--button-inset-col1: hsl(var(--primary-hue), 80%, 30%, 0.5);
				--button-inset-col2: hsl(var(--primary-hue), 80%, 50%, 0.5);
				--button-inset-shadow-col1: var(--button-inset-col1);
				--button-inset-shadow-col2: var(--button-inset-col2);
				box-shadow:
					1px 1px 3px var(--shadow-color),
					inset -1px -1px 2px var(--button-inset-shadow-col1),
					inset 2px 2px 1px var(--button-inset-shadow-col2);
				&:hover {
					background-color: var(--primary-background-hover);
				}
				&:active {
					padding: 0.55rem 1rem 0.45rem 1rem;
					background-color: var(--primary-background-active);
					--button-inset-shadow-col1: var(--button-inset-col2);
					--button-inset-shadow-col2: var(--button-inset-col1);
				}
				&:disabled {
					pointer-events: none;
					text-shadow: none;
					box-shadow: none;
					filter: grayscale(0.5) saturate(0.5) brightness(1.5);
					-webkit-text-stroke: unset;
					color: #8f9ab1;
				}
			}

			textarea {
				tab-size: 4;
				padding: 0.5rem;
				border-radius: 0;
				transition:
					background-color 0.3s,
					border-color 0.3s;
			}

			select {
				border-radius: 4px;
				option {
					font-weight: 500;
					&.selected {
						background: var(--option-backgroundColor-selected);
					}
				}
				optgroup option {
					font-size: 0.96em;
				}
			}

			textarea,
			select {
				outline: none;
				box-sizing: border-box;
				color: var(--form-element-color);
				border-color: var(--form-element-borderColor);
				background: var(--form-element-backgroundColor);
				&:focus {
					border-color: var(--form-element-borderColor-hover);
					&::placeholder {
						opacity: 0;
					}
				}
			}

			details {
				border: 1px solid var(--form-element-borderColor);
				border-radius: 4px;
				line-height: 1.5em;
				padding: 0 0.25em;
				margin: 0 0 0.5rem 0;
				overflow: hidden;
				> summary {
					list-style: none;
					font-weight: bold;
					font-size: 0.9rem;
					padding: 0.25em 0.25em 0.25em 14px;
					margin: 0;
					background: var(--backgroundColor) var(--icon-chevron-right) no-repeat 0 50%;
					background-size: 10px;
				}
				&[open] {
					padding-bottom: 0.5rem;
					summary {
						background-image: var(--icon-chevron-down);
						border-bottom: 1px dashed var(--form-element-borderColor-disabled);
						margin-bottom: 1rem;
					}
				}
			}

			a[data-icon] {
				margin: 0;
				font-size: 0;
				cursor: pointer;
				user-select: none;
				display: inline-block;
				overflow: hidden;
				vertical-align: middle;
				height: var(--icon-size);
				width: var(--icon-size);
				background: no-repeat center center;
				background-size: var(--icon-size) var(--icon-size);
				filter: sepia(1) hue-rotate(var(--filter-hue)) contrast(0.5);
				&:hover {
					filter: sepia(1) hue-rotate(var(--filter-hue)) contrast(1);
				}
				&[data-icon='expand'] {
					background-image: var(--icon-expand);
				}
				&[data-icon='contract'] {
					background-image: var(--icon-contract);
				}
				&[data-icon='floppy'] {
					background-image: var(--icon-floppy);
				}
				&[data-icon='erase'] {
					background-image: var(--icon-erase);
				}
				&[data-icon='clipboard'] {
					background-image: var(--icon-clipboard);
				}
			}

			#page-content {
				zoom: 1;
				#app {
					width: 100%;
					max-width: 100%;
					display: flex;
					> section {
						overflow: hidden;
						&[id^='panel-'] {
							min-height: 100%;
							min-width: 9.5rem;
							position: relative;
							> .code {
								min-height: 100%;
								font-family: monospace;
								&#source {
									resize: both;
									max-width: 100%;
									min-width: 9.5rem;
									width: calc(50vw - 7rem);
								}
								&#processed {
									resize: none;
									width: 100%;
								}
								+ .actions {
									background: var(--backgroundColor);
									border: var(--form-element-borderColor) solid;
									border-width: 0 0 1px 1px;
									border-radius: 0 0 0 4px;
									padding: 0 0 5px 5px;
									z-index: 2;
									position: absolute;
									right: 0;
									top: 0;
									&:not(:hover) {
										opacity: 0;
									}
								}
								&:focus + .actions {
									border-color: var(--form-element-borderColor-hover);
								}
							}
						}
						&#panel-right {
							flex: 1 1 0;
						}
						&#controls {
							display: flex;
							flex-direction: column;
							max-height: calc(100vh - 2rem);
							width: min-content;
							min-width: 300px;
							padding: 0 1rem;
							select {
								margin: 0 0 0.5rem 0;
							}
							button {
								align-self: center;
								margin: 5px 0;
								width: -webkit-fill-available;
							}
							label {
								display: block;
								white-space: nowrap;
								overflow: hidden;
								text-overflow: ellipsis;
								padding: 0 0.25em 0 0;
								max-width: 100%;
							}
							details {
								min-width: -webkit-fill-available;
								min-height: min-content;
								overflow-y: auto;
								summary {
									display: flex;
									position: sticky;
									top: 0;
									.actions {
										flex: 1 0 auto;
										text-align: right;
									}
								}
							}
							#scrollable {
								overflow: hidden;
								overflow-y: auto;
								display: flex;
								flex-direction: column;
								#buttons {
									line-height: 2.5rem;
								}
								#pasted {
									flex: 1;
									resize: none;
									overflow: auto;
									background: transparent;
									border: 0;
									&:empty {
										display: none;
									}
								}
							}
						}
					}
					&.processing {
						pointer-events: none;
						#processed {
							font-size: 0;
							background-size: 50px 50px;
							background: no-repeat center center;
						}
					}
					&[class*='-expanded'] {
						#controls {
							display: none;
						}
						&.source-expanded {
							#panel-right {
								display: none;
							}
							#source {
								resize: none !important;
								width: 100vw !important;
							}
						}
						&.processed-expanded {
							#panel-left {
								display: none;
							}
						}
					}
					&:not(.ready) {
						opacity: 0.5;
						pointer-events: none;
					}
				}
			}
		</style>
	</head>
	<body>
		<main id="page-content">
			<article id="app">
				<section id="panel-left">
					<textarea
						id="source"
						class="code"
						placeholder="Enter your code here..."
					></textarea>
					<div class="actions">
						<a id="clear-source" data-icon="erase">Clear</a>
						<a id="imize-source" data-icon="expand">Maximize</a>
					</div>
				</section>
				<section id="controls">
					<select id="selectSample">
						<option disabled hidden selected>Choose&hellip;</option>
					</select>
					<div id="scrollable" class="thin-scrollbar">
						<details open>
							<summary>Encoder</summary>
							<div id="encoders"></div>
						</details>
						<details open>
							<summary>Alphabets</summary>
							<div id="alphabets"></div>
						</details>
						<p>
							<label>
								<input type="checkbox" id="omit-padding" disabled />
								omit padding
							</label>
						</p>
						<div id="buttons">
							<button id="runEncode">Encode byte-array to base64</button>
							<button id="runConvertBack" disabled>
								Convert base64 back to byte-array
							</button>
							<button id="runDecode" disabled>Decode base64 to string</button>
						</div>
						<textarea id="pasted"></textarea>
					</div>
				</section>
				<section id="panel-right">
					<textarea id="processed" class="code" readonly></textarea>
					<div class="actions">
						<a id="save-processed" data-icon="floppy">Copy</a>
						<a id="copy-processed" data-icon="clipboard">Copy</a>
						<a id="imize-processed" data-icon="expand">Maximize</a>
					</div>
				</section>
			</article>
		</main>
		<script type="module">
			import { byteArrayToBase64 } from './byteArrayToBase64.mjs';
			import { uint8ArrayToBase64, base64ToUint8Array } from './tc39.mjs';
			{
				const [
					$app,
					$source,
					$clearSource,
					$imizeSource,
					$processed,
					$saveProcessed,
					$copyProcessed,
					$imizeProcessed,
					$runEncode,
					$runConvertBack,
					$runDecode,
					$encoders,
					$alphabets,
					$selectSample,
					$pasted,
					$omitPadding
				] = [
					'app',
					'source',
					'clear-source',
					'imize-source',
					'processed',
					'save-processed',
					'copy-processed',
					'imize-processed',
					'runEncode',
					'runConvertBack',
					'runDecode',
					'encoders',
					'alphabets',
					'selectSample',
					'pasted',
					'omit-padding'
				].map(e => document.getElementById(e));

				$clearSource.addEventListener('click', () => {
					$source.value = '';
				});
				$saveProcessed.addEventListener('click', () => {
					const str = $processed.value;
					if (str) {
						$pasted.insertAdjacentHTML('afterbegin', `${str}\n\n`);
					}
				});

				navigator.permissions.query({ name: 'clipboard-write' }).then(permission => {
					if ('granted' === permission.state) {
						let disabled;
						$copyProcessed.addEventListener('click', () => {
							if (!disabled) {
								navigator.clipboard.writeText($processed.value).finally(() => {
									disabled = false;
								});
							}
						});
					}
				});

				const imizeClickHandler = event => {
					event.stopImmediatePropagation();
					const el = event.currentTarget;
					const actual = $app.imizer;
					if (!actual || el === actual) {
						const [icon, method, next] = (el.maximized = !el.maximized)
							? ['contract', 'add', el]
							: ['expand', 'remove', null];
						$app.imizer = next;
						el.dataset.icon = icon;
						$app.classList[method](`${el.id.substring(6)}-expanded`);
					}
				};
				[$imizeSource, $imizeProcessed].forEach(e =>
					e.addEventListener('click', imizeClickHandler)
				);

				const optionsFrag = new DocumentFragment();
				const optionsMap = new Map();
				for (const { group, samples } of [
					{
						group: 'Letters',
						samples: [
							{
								name: 'Uppercase Letters',
								content: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
							},
							{
								name: 'Lowercase Letters',
								content: 'abcdefghijklmnopqrstuvwxyz'
							},
							{
								name: 'Very Long Uppercase',
								content: 'A'.repeat(100)
							},
							{
								name: 'Very Long Lowercase',
								content: 'a'.repeat(100)
							}
						]
					},
					{
						group: 'Numeric',
						samples: [
							{
								name: 'Single Digits',
								content: '0123456789'
							},
							{
								name: 'Double Digits',
								content: '10 20 30 40 50 60 70 80 90'
							},
							{
								name: 'Triple Digits',
								content: '100 200 300 400 500 600 700 800 900'
							},
							{
								name: 'Very Long Numeric',
								content: '1'.repeat(100)
							}
						]
					},
					{
						group: 'Special Characters',
						samples: [
							{
								name: 'Punctuation',
								content: '!"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~'
							},
							{
								name: 'Symbols',
								content: '♥☺☮✓✗⚠⚡⭐🌍🌎🌏🌐🌑🌒🌓🌔🌕🌖🌗🌘🌙🌚🌛🌜🌝🌞'
							},
							{
								name: 'Very Long Punctuation',
								content: '!'.repeat(100)
							},
							{
								name: 'Very Long Symbols',
								content: '♥'.repeat(100)
							},
							{
								name: 'Unicode mathematical Script Capital Letters',
								content: '𝓐𝓑𝓒𝓓𝓔𝓕𝓖𝓗𝓘𝓙𝓚𝓛𝓜𝓝𝓞𝓟𝓠𝓡𝓢𝓣𝓤𝓥𝓦𝓧𝓨𝓩' //
							}
						]
					},
					{
						group: 'Mixed Content',
						samples: [
							{
								name: 'Alphanumeric',
								content: 'a1b2c3d4e5f6g7h8i9j0'
							},
							{
								name: 'Multilingual',
								content: 'Здравствуйте! こんにちは! 你好! Hola! Ciao! Bonjour!'
							},
							{
								name: 'Emoji',
								content: '😀😃😄😁😆😅🤣😂🙂🙃😉😊😇'
							},
							{
								name: 'Very Long Alphanumeric',
								content: 'a1'.repeat(50)
							},
							{
								name: 'Very Long Multilingual',
								content: 'Здравствуйте!'.repeat(20)
							},
							{
								name: 'Very Long Emoji',
								content: '😀😃😄'.repeat(17)
							},
							{
								name: 'URL',
								content:
									'https://www.example.com/path/to/resource?query=string&another=value'
							},
							{
								name: 'Buffer Limit Test',
								content: 'A'.repeat(65536) // Testing upper limit for some systems
							}
						]
					},
					{
						group: 'XML Strings',
						samples: [
							{
								name: 'Basic XML',
								content: `<note><to>Tove</to><from>Jani</from><heading>Reminder</heading><body>Don't forget me this weekend!</body></note>`
							},
							{
								name: 'Nested XML',
								content: `<root><parent><child><subchild>Value</subchild></child></parent></root>`
							},
							{
								name: 'Self-Closing Tag XML',
								content: `<data><item key="1"/><item key="2"/></data>`
							}
						]
					},
					{
						group: 'HTML Strings',
						samples: [
							{
								name: 'Basic HTML',
								content: `<!DOCTYPE html><html><head><title>Test</title></head><body><h1>Hello, World!</h1></body></html>`
							},
							{
								name: 'Nested HTML',
								content: `<div><section><article><p>Sample content</p></article></section></div>`
							},
							{
								name: 'Self-Closing HTML Tags',
								content: `<img src="image.png" alt="Example"/><br/><hr/>`
							},
							{
								name: 'HTML with URL Characters',
								content: `<a href="https://www.example.com/path?query=string&another=value">Click Here</a>`
							}
						]
					},
					{
						group: 'SVG Strings',
						samples: [
							{
								name: 'Basic SVG',
								content:
									'<svg width="100" height="100"><circle cx="50" cy="50" r="40" style="fill:red"/></svg>'
							},
							{
								name: 'Nested SVG',
								content:
									'<svg width="200" height="200"><g><rect width="100" height="100" style="fill:blue"/><circle cx="150" cy="150" r="50" style="fill:green"/></g></svg>'
							},
							{
								name: 'SVG with URL',
								content:
									'<svg xmlns:xlink="http://www.w3.org/1999/xlink"><image xlink:href="https://www.example.com/image.png" height="100" width="100"/></svg>'
							}
						]
					}
				]) {
					const optgroupEl = document.createElement('optgroup');
					optgroupEl.label = group;
					samples.forEach(({ name, content }, index) => {
						const optionEl = document.createElement('option');
						optionEl.textContent = name;
						const indexAsString = String(index);
						optionEl.value = indexAsString;
						optionsMap.set(indexAsString, content);
						optgroupEl.append(optionEl);
					});
					optionsFrag.append(optgroupEl);
				}
				$selectSample.append(optionsFrag);
				$selectSample.addEventListener('change', () => {
					$source.value = optionsMap.get($selectSample.value);
				});

				const optsFrag = new DocumentFragment();

				const alphabetOption_base64 = {
					initiallyChecked: true,
					value: 'base64'
				};
				const alphabetOption_base64url = {
					value: 'base64url',
					disabled: true
				};

				let chosenAlphabetEl;
				const checkAlphabetHandler = event => {
					const el = event.currentTarget;
					chosenAlphabetEl && (chosenAlphabetEl.checked = false);
					chosenAlphabetEl = el.checked ? el : null;
				};

				const alphabetMap = new Map();

				for (const item of [alphabetOption_base64, alphabetOption_base64url]) {
					const radioEl = document.createElement('input');
					radioEl.name = 'alphabet';
					radioEl.type = 'radio';
					radioEl.item = item;
					if (item.initiallyChecked) {
						radioEl.checked = true;
						chosenAlphabetEl = radioEl;
					} else {
						radioEl.disabled = item.disabled;
					}
					alphabetMap.set(item.value, radioEl);
					radioEl.addEventListener('change', checkAlphabetHandler);
					const labelEl = document.createElement('label');
					labelEl.append(radioEl, document.createTextNode(item.value));
					optsFrag.append(labelEl);
				}
				$alphabets.appendChild(optsFrag);

				let shouldOmitPadding = false;
				$omitPadding.addEventListener('change', event => {
					const el = event.currentTarget;
					shouldOmitPadding = el.checked;
				});

				const encoder1 = 'btoa';
				const encoder2 = 'TC 39 Proposal';
				const encoder3 = 'byteArrayToBase64';

				let chosenEncoderEl;
				const checkEncoderHandler = event => {
					const el = event.currentTarget;
					chosenEncoderEl && (chosenEncoderEl.checked = false);
					chosenEncoderEl = el.checked ? el : null;
					const base64urlRadioEl = alphabetMap.get('base64url');
					switch (el.item.name) {
						case encoder1:
							base64urlRadioEl.disabled = $omitPadding.disabled = true;
							break;
						case encoder2:
						case encoder3:
							base64urlRadioEl.disabled = $omitPadding.disabled = false;
							break;
					}
				};
				const textEncoder = new TextEncoder();
				for (const item of [
					{
						initiallyChecked: true,
						name: encoder1,
						fn: str => {
							const byteArray = textEncoder.encode(str);
							const base64str = btoa(
								Array.from(byteArray, byte => String.fromCodePoint(byte)).join('')
							);
							return [base64str, byteArray];
						}
					},
					{
						name: encoder2,
						fn: (str, alphabet, omitPadding) => {
							const byteArray = textEncoder.encode(str);
							const base64str = uint8ArrayToBase64(byteArray, {
								alphabet,
								omitPadding
							});
							return [base64str, byteArray];
						}
					},
					{
						name: encoder3,
						fn: (str, alphabet, omitPadding) => {
							const byteArray = textEncoder.encode(str);
							const base64str = byteArrayToBase64(byteArray, {
								alphabet,
								omitPadding
							});
							return [base64str, byteArray];
						}
					}
				]) {
					const radioEl = document.createElement('input');
					radioEl.type = 'radio';
					radioEl.name = 'encoder';
					radioEl.item = item;
					if (item.initiallyChecked) {
						radioEl.checked = true;
						chosenEncoderEl = radioEl;
					}
					radioEl.addEventListener('change', checkEncoderHandler);
					const labelEl = document.createElement('label');
					labelEl.append(radioEl, document.createTextNode(item.name));
					optsFrag.append(labelEl);
				}
				$encoders.appendChild(optsFrag);

				const disableConvertAndDecode = bool => {
					$runConvertBack.disabled = $runDecode.disabled = bool;
				};

				const setProcessedValue = newValue => {
					$processed.value = newValue;
					disableConvertAndDecode(!newValue);
				};

				const areUint8ArraysEqual = (a, b) => {
					if (a.byteLength !== b.byteLength) {
						return false;
					}
					for (let i = 0; i < a.byteLength; i++) {
						if (a[i] !== b[i]) {
							return false;
						}
					}
					return true;
				};

				const textDecoder = new TextDecoder();

				$runEncode.addEventListener('click', () => {
					$app.classList.add('processing');
					const done = () => {
						$app.classList.remove('processing');
					};
					const originalStr = $source.value;
					if (originalStr) {
						try {
							const whichAphabet = chosenAlphabetEl.item.value;
							const [base64str, byteArray] = chosenEncoderEl.item.fn(
								originalStr,
								whichAphabet,
								shouldOmitPadding
							);
							if (base64str !== $processed.value) {
								setProcessedValue(base64str);
							} else {
								base64str && alert('same');
							}
							$runConvertBack.onclick = () => {
								$app.classList.add('processing');
								if (base64str) {
									try {
										const result = base64ToUint8Array(base64str, {
											alphabet: whichAphabet
										});
										if (areUint8ArraysEqual(byteArray, result.bytes)) {
											alert('success');
										} else {
											alert('fail');
											console.dir({
												originalStr,
												byteArray,
												base64str,
												byteArrayFromBase64str: result
											});
										}
									} catch (exception) {
										console.error(exception);
									} finally {
										$app.classList.remove('processing');
									}
								}
							};
							$runDecode.onclick = () => {
								$app.classList.add('processing');
								try {
									const result = base64ToUint8Array($processed.value, {
										alphabet: whichAphabet
									});
									const decodedStr = textDecoder.decode(result.bytes);
									setProcessedValue(decodedStr);
									if (decodedStr === $source.value) {
										disableConvertAndDecode(true);
										queueMicrotask(() => {
											alert('same as source');
										});
									}
								} catch (exception) {
									console.error(exception);
								} finally {
									$app.classList.remove('processing');
								}
							};
						} catch (exception) {
							console.error(exception);
						} finally {
							done();
						}
					} else {
						setProcessedValue('');
						done();
					}
				});

				$app.classList.add('ready');
			}
		</script>
	</body>
</html>
